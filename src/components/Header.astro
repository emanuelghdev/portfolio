---
import ThemeToggle from './React/ThemeToggle.tsx'
import LanguageToggle from '../components/React/LanguageToggle.tsx'
import { getTranslations } from '../utils/i18n'
import MenuIcon from "./icons/MenuIcon.astro"

const t = getTranslations()
---

<!-- Header -->
<header class="glass fixed flex justify-between items-center px-6 py-4 w-[22rem] sm:w-md md:w-xl lg:w-3xl mx-auto mt-4 lg:mt-6 shadow-[2px_3px_5px_0px_#add8e6] dark:shadow-[2px_3px_5px_0px_rgba(120,119,198,0.3)] z-[99]">
    <!-- Drawer button -->
    <div class="flex items-center md:hidden">
        <button id="menu" aria-controls="mobile-menu" aria-expanded="false" aria-label="Abrir menú" class="rounded-md text-gray-700 hover:text-black dark:text-gray-200 dark:hover:text-white transition duration-300 cursor-pointer">
            <MenuIcon />
        </button>
    </div>

    <!-- Menu -->
    <nav class="hidden md:flex flex-row gap-x-10 sm:gap-x-8 lg:gap-x-10">
        <a href="#top" data-i18n="nav.home">{t.nav.home}</a>
        <a href="#about" data-i18n="nav.about">{t.nav.about}</a>
        <!-- <a href="#experience" data-i18n="nav.experience">{t.nav.experience}</a> -->
        <a href="#projects" data-i18n="nav.projects">{t.nav.projects}</a>
        <a href="#stack" data-i18n="nav.stack">{t.nav.stack}</a>
    </nav>

    <!-- Toggles -->
    <article class="flex flex-row gap-x-8 lg:gap-x-10 pb-[2px]">
        <ThemeToggle client:load />
        <LanguageToggle client:load />
    </article>
</header>

<!-- Script para actualizar el idioma -->
<script type="module" src="/i18n.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const header = document.querySelector('header');
        if (!header) return;

        const btn = header.querySelector('#menu') as HTMLButtonElement | null;
        const desktopNav = header.querySelector('nav') as HTMLElement | null;
        if (!btn || !desktopNav) return;

        let popup: HTMLElement | null = null;

        const createPopup = () => {
            if (popup) return;

            // Contenedor principal
            popup = document.createElement('div');
            popup.id = 'mobile-popup';
            popup.setAttribute('role', 'menu');
            popup.setAttribute('aria-hidden', 'true');
            const rect = header.getBoundingClientRect();
            const topPx = rect.bottom + window.scrollY + 8;

            Object.assign(popup.style, {
                position: 'absolute',
                left: '50%',
                transform: 'translateX(-50%) scaleY(0)',
                transformOrigin: 'top',
                top: `${topPx}px`,
                zIndex: '9999',
                width: header.classList.contains('w-[22rem]') ? getComputedStyle(header).width : '90%',
                maxWidth: getComputedStyle(header).maxWidth || '920px',
                transition: 'transform 180ms ease, opacity 180ms ease',
                opacity: '0',
            });

            // Inner panel
            const panel = document.createElement('div');
            panel.className = 'rounded-2xl w-fit bg-white/20 dark:bg-black/20 border border-gray-900 backdrop-blur-lg p-4 shadow-[2px_3px_5px_0px_#add8e6] dark:shadow-[2px_3px_5px_0px_rgba(120,119,198,0.3)] z-[99]';
            panel.style.overflow = 'hidden';

            // Nav vertical
            const nav = document.createElement('nav');
            nav.className = 'flex flex-col items-start gap-3';
            nav.innerHTML = desktopNav.innerHTML;

            // Animación escalonada de salida
            const items = Array.from(nav.querySelectorAll('a,button')) as HTMLElement[];
            items.forEach((it, i) => {
                it.style.display = 'block';
                it.style.opacity = '0';
                it.style.transform = 'translateY(-6px)';
                it.style.transition = `opacity 220ms ease ${i * 75}ms, transform 220ms ease ${i * 75}ms`;
                if (!it.hasAttribute('tabindex')) it.setAttribute('tabindex', '0');
            });

            panel.appendChild(nav);
            popup.appendChild(panel);
            document.body.appendChild(popup);

            // Pequeño delay para la transición
            requestAnimationFrame(() => {
                if (!popup) return;
                popup.style.transform = 'translateX(-50%) scaleY(1)';
                popup.style.opacity = '1';
                popup.setAttribute('aria-hidden', 'false');
                btn.setAttribute('aria-expanded', 'true');

                // Seteamos los estilos finales después de abrirlo del todo
                items.forEach((it) => {
                    it.style.opacity = '1';
                    it.style.transform = 'translateY(0)';
                });
            });

            // Event handlers
            const onKey = (e: KeyboardEvent) => {
                if (e.key === 'Escape') closePopup();
            };
            
            const onDocClick = (e: MouseEvent) => {
                const target = e.target as Node;
                if (!popup) return;
                if (!popup.contains(target) && !btn.contains(target)) closePopup();
            };

            document.addEventListener('keydown', onKey);
            document.addEventListener('click', onDocClick);

            // Mantenemos referencias para eliminar los listeners al cerrar
            (popup as any).__cleanup = () => {
                document.removeEventListener('keydown', onKey);
                document.removeEventListener('click', onDocClick);
            };
        };

        const toggle = (e?: Event) => {
            e?.stopPropagation();
            if (popup) closePopup();
            else createPopup();
        };

        btn.addEventListener('click', toggle);

        // Cerramos al cambiar de tamaño o al hacer scroll
        window.addEventListener('resize', () => {
            if (popup) closePopup();
        });

        window.addEventListener('scroll', () => {
            if (popup) closePopup();
        });

        const closePopup = () => {
            if (!popup) return;
            popup.setAttribute('aria-hidden', 'true');
            btn.setAttribute('aria-expanded', 'false');

            // Cambiamos la visibilidad del item para que cierre más estéticamente
            const items = Array.from(popup.querySelectorAll('a,button')) as HTMLElement[];
            items.forEach((it) => {
                it.style.opacity = '0';
                it.style.transform = 'translateY(-6px)';
            });

            // Animación scaleY a 0
            popup.style.transform = 'translateX(-50%) scaleY(0)';
            popup.style.opacity = '0';

            setTimeout(() => {
                if (popup) {
                    const cleanup = (popup as any).__cleanup;
                    if (typeof cleanup === 'function') cleanup();
                    popup.remove();
                    popup = null;
                }
            }, 200);
        };
    });
</script>

<style>
    @reference "../styles/global.css";

    /* Estilo glassmorphism */
    .glass {
        @apply bg-white/20 dark:bg-black/20 border border-gray-900 rounded-full backdrop-blur-lg;
        -webkit-backdrop-filter: blur(16px);
        backdrop-filter: blur(16px);
    }

    /* Fallback si backdrop-filter no está soportado */
    @supports not ((-webkit-backdrop-filter: blur(16px)) or (backdrop-filter: blur(16px))) {
        .glass {
            background-color: rgba(255,255,255,0.85);
        }
    }
    
    /* Estilo enlaces */
    a {
        @apply relative text-gray-700 hover:text-black transition-colors duration-300 after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:h-[0.12rem] after:w-0 after:bg-black after:transition-all after:duration-300 hover:after:w-full dark:text-gray-200 dark:hover:text-white dark:after:bg-white;
    }
</style>